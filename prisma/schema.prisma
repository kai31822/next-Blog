// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//database schema   [ npx prisma migrate dev   ]
//blog
model User {
  //field: name   type
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?  @unique @db.VarChar(20)
  password      String
  role          Role     @default(USER)
  posts         Post[]   @relation("WrittenPosts")
  favoritePosts Post[]   @relation("FavoritePosts")
  Issues        Issues[]
  profile       Profile?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([email, name])
  @@index([email, name])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String @default("...")
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Post {
  id           String     @id @default(uuid())
  title        String
  published    Boolean    @default(false)
  context      String     @db.Text
  //Posts
  author       User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId     String
  //favoritePosts
  favoriteBy   User?      @relation("FavoritePosts", fields: [favoriteById], references: [id])
  favoriteById String?
  categories   Category[] // A post can have many category
  tags         Tag[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Tag {
  name  String @id
  posts Post[]
}

enum Role {
  USER
  ADMIN
}

//issues
model Issues {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  status      Status   @default(OPEN)
  createdAT   DateTime @default(now())
  updatedAT   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  userId      String
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}
